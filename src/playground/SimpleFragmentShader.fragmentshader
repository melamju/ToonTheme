#version 450 core

// Ouput data
out vec3 color;

//Input data
in vec3 fNormal;
in vec3 fPosition;
in vec3 fLight;

//Data from playground
uniform vec3 directionLight;
uniform float shininess;
  //Material parameters
  uniform vec3 materialColor;

void main()
{
  //Light source and vertex information
  vec3 lightDirection = normalize(fLight) + directionLight;
  vec3 v = normalize(fPosition);       
  vec3 N = normalize(fNormal);

  float ka = 0.1;
  float ks = 0.7;
  float kd = 0.3;
  
  //Compute vectors for light model
  vec3 L = normalize(lightDirection - v);   
  vec3 E = normalize(vec3(0,0,0)-v); // we are in Eye Coordinates, so EyePos is (0,0,0)  
  vec3 R = normalize(-reflect(L,N)); 
  
  //calculate Ambient Intensity:  
  float Iamb = ka;    

  //calculate Diffuse Intensity:  
  float Idiff = kd * max(dot(N,L), 0.0);
  Idiff = clamp(Idiff, 0.0, 1.0);     

  // calculate Specular Intensity:
  float Ispec = ks * pow(max(dot(R,E),0.0),0.3*shininess);
  Ispec = clamp(Ispec, 0.0, 1.0); 

  // Compute Total Intensity:  
  float Intensity = Iamb + Idiff + Ispec;   
  
  //Write Color: Try Toon
  //color = Intensity * materialColor;

   if (Intensity > 0.95){
    vec3 white = vec3(1.0, 1.0, 1.0);
	color = white;
	}
  else if (Intensity > 0.5){
	color = materialColor;
	}
  else if (Intensity > 0.3){
	color = 0.75 * materialColor;
	}
  else if (Intensity > 0.1){
    color = 0.5 * materialColor;
	}
  else{
	color = 0.25 * materialColor;
	}
 
}